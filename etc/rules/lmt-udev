#!/bin/sh -e


# /usr is not guaranteed to be mounted when udev starts
non_systemd_way() {
	if [ -e /lib/udev/hotplug.functions ]; then
		. /lib/udev/hotplug.functions
		wait_for_file /usr/sbin/laptop_mode
		exec /usr/sbin/laptop_mode "$@"
	else
		file=$1
		timeout=$2
		[ "$timeout" ] || timeout=120

		count=$timeout
		while [ $count != 0 ]; do
			[ -e "/usr/sbin/laptop_mode" ] && exec /usr/sbin/laptop_mode "$@" && return 0
			sleep 1
			count=$(($count - 1))
		done

		mesg "$file did not appear before the timeout!"
		exit 1
	fi
}


## For Debug only
#export LMT_DEBUG="/tmp/__lmt__debug.txt"
[ -z $LMT_DEBUG ] || rm -f $LMT_DEBUG
##

# Under systemd, we don't do synchronous operations, so we can run in the foreground;
# And we need also need to run in foreground, because forked children get kill immediately
# under systemd/udev

# The seconds "auto" evaluation is to determine if it is a standard execution;
# i.e. a reload/restart or a device plug/unplug

if [ -d /run/systemd/system ] && [ x$1 = xauto ]; then
	[ -z $LMT_DEBUG ] || echo "systemd is $PPID $$ $@" > $LMT_DEBUG
	exec systemctl --no-block reload-or-restart laptop-mode
else
	# Under sysvinit/upstart, we need to fork as we start the long-running
	# /usr/sbin/laptop_mode process.
	#
	# Also, if this happens during boot, we may want to wait until /usr is available
	#
	# That said, we background the execution here, because, otherwise udevd will wait
	# for this process which will block
	
	# This stanza will also be called for device plug/unplug events

	exec > /dev/null 2>/dev/null
	non_systemd_way "$@" &
	[ -z $LMT_DEBUG ] || echo "regulard is $PPID $$ $@" > $LMT_DEBUG
fi

exit 0
